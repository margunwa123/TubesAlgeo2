"""
eehehehehe

v1 = extract.extract_features("../img/Aaron Paul0_262.jpg")
img.show_img("../img/Aaron Paul0_262.jpg",'first img')
v2 = extract.extract_features("../img/Aaron Paul0_262.jpg")
img.show_img("../img/Aaron Paul0_262.jpg",'second img')
#extract.batch_extractor("../img")
cv2.waitKey()
sim = similarity.cos_similarity(v1, v2)
$euc = similarity.euclidean_distance(v1, v2)
>>print(sim)
!print(euc)
"""

"""
class Matcher(object):
    def __init__(self, pickled_db_path="features.pck"):
        with open(pickled_db_path) as fp:
            self.data = pickle.load(fp)
        self.names = []
        self.matrix = []
        for k, v in self.data.iteritems():
            self.names.append(k)
            self.matrix.append(v)
        self.matrix = np.array(self.matrix)
        self.names = np.array(self.names)

    def cos_cdist(self, vector):
        v = vector.reshape(1, -1)
        print("matrix pertama: "+ self.matrix[0])
        print("name pertama: "+ self.names[0])
        print("cos cdist:" + scipy.spatial.distance.cdist(self.matrix, v, 'cosine').reshape(-1))
        return scipy.spatial.distance.cdist(self.matrix, v, 'cosine').reshape(-1) #ini tuh udah bentuk array

    def match(self, image_path, topn=5):
        features = extract_features(image_path)
        img_distances = self.cos_cdist(features)
        print("Img distance:" + img_distances)
        nearest_ids = np.argsort(img_distances)[:topn].tolist() #buat ngesort cdist paling gede lalu dimasukin ke list
        nearest_img_paths = self.names[nearest_ids].tolist() #buat ngedapetin nama path
        return nearest_img_paths, img_distances[nearest_ids].tolist()
"""
// file facerecog.py
import cv2
import similarity
import extract
import img
def run(img):
    # a = int(input("Berapa banyak image mirip yang ingin dikeluarkan: "))
    extract.batch_extractor("..\\pins-database\\")
    # image = img.get_random_img()
    # paths = extract.closest_match_cosine(img,5)
    #paths = extract.closest_match_euc(img,5)
    #img.show_img(path,"Query Image")
    #print(path)
    #img.show_batch_img(paths)
    #cv2.waitKey()
run('hehe')

//file mainprogram
"""
    def openFile(self):
        self.area = tk.Canvas(self, bg = "blue")
        self.area.grid(row=1, column=0, columnspan=2, rowspan=4, padx=5, sticky = E+W+S+N)
        self.filename = filedialog.askopenfilename(initialdir= "/", title= "Select Picture", filetype = (("jpeg", "*.jpg"), ("All File", "*,*")))
        self.image = Image.open(self.filename)
        self.image = self.image.resize((267,265), Image.ANTIALIAS)
        self.img = ImageTk.PhotoImage(self.image)
        self.area.create_image(1,0, image = self.img, anchor=NW)
    
    def databaseFoto(self):
        self.next = tk.Button(self, text="Next", bd =3)
        self.next.grid(column =0, row=5, padx = 15)
        self.next["command"] = self.openimg()
        self.prev = tk.Button(self, text = "Prev", bd = 3)
        self.prev = 0
        self.prev.place(x=70,y=268)
    def say_hi(self):
        print("hi there, everyone!")
"""
